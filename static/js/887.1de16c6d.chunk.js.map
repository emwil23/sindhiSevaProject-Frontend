{"version":3,"file":"static/js/887.1de16c6d.chunk.js","mappings":"iTAyHA,UA1G2B,WAEzB,OAAwBA,EAAAA,EAAAA,UAAiB,OAAzC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAsCF,EAAAA,EAAAA,YAAtC,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAsBJ,EAAAA,EAAAA,YAAtB,eAAOK,EAAP,KAAYC,EAAZ,KACA,GAAwCN,EAAAA,EAAAA,UAAiB,GAAzD,eAAOO,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAkBXC,EAAU,SAACC,IAJS,SAACA,GACzB,OAAOC,EAAAA,EAAAA,IAAmBD,EAC3B,CAGIE,CAAkBF,IASnBG,EAAAA,EAAAA,GAAiB,6BARjBC,EAAAA,EAAAA,IAAY,cAAD,OAAeJ,IAAUK,MAAK,SAAAC,GACrC,GAAGA,EAAIC,aACL,OAAOJ,EAAAA,EAAAA,GAAiB,mBAC1BA,EAAAA,EAAAA,GAAiBG,EAAIE,SACrBpB,EAAQ,mBACX,GAIJ,EAYKqB,EAAY,SAACC,IACjBN,EAAAA,EAAAA,IAAY,qBAAD,OAAsBf,EAAtB,YAAqCqB,IAAiBL,MAAK,SAAAC,GAxCvD,IAACK,EAyCXL,EAAIM,WACLT,EAAAA,EAAAA,GAAiB,2BA1CLQ,EA2CH,CAAEX,OAAQX,IA1CvBe,EAAAA,EAAAA,IAAY,SAAUO,GAAQN,MAAK,SAAAC,GACjCX,GAASkB,EAAAA,EAAAA,IAAgBP,KACzBH,EAAAA,EAAAA,GAAiB,aACjBR,GAASmB,EAAAA,EAAAA,OACTjB,EAAS,IAAK,CAAEkB,SAAS,GAC1B,IAAEC,OAAM,SAACC,GAAsB,IAAD,EACzBC,EAAS,UAAGD,EAAIE,gBAAP,aAAG,EAAcC,MAC9BjB,EAAAA,EAAAA,GAAiBe,EAAMA,MAAMV,QAC9B,MAqCGL,EAAAA,EAAAA,GAAiB,cACpB,GACF,EAaD,OACE,gBAAKkB,UAAU,iBAAf,UACE,iBAAKA,UAAU,yBAAf,WACE,gBAAKA,UAAU,WAAf,SACY,QAATlC,GACD,iCACI,SAAC,KAAD,CACEmC,YAAY,qBACZC,MAAOlC,EACPmC,SAAUlC,EACVmC,eAAe,QAEjB,iBAAKJ,UAAU,WAAf,WACA,SAAC,IAAD,CAAQA,UAAU,OAAOK,QAAS,kBAAM3B,EAAQV,EAAd,EAAlC,uBACA,0CACA,SAAC,IAAD,CAAQgC,UAAU,OAAOK,QAAS,kBAAM7B,EAAS,iBAAf,EAAlC,6BAIJ,iBAAKwB,UAAU,yCAAf,WACE,SAAC,IAAD,CAAUE,MAAOhC,EAAKiC,SAAUhC,EAAQmC,WAAS,EAACC,UAAW,EAAGC,QAAQ,SAASC,UAAU,KAC3F,iBAAKT,UAAU,4BAAf,WACE,SAAC,EAAAU,UAAD,CAAWC,cAAe,WArDhCvC,GAAgB,GAClBU,EAAAA,EAAAA,GAAiB,oBAAqB,2BAEtCC,EAAAA,EAAAA,IAAY,aAAD,OAAcf,IAAegB,MAAK,SAAAC,IAC3CH,EAAAA,EAAAA,GAAiBG,EAAIE,SACrBd,EAAgBD,EAAe,EAChC,GA+CiC,EAAmBwC,aAjCpC,SAACC,GACpB,OACE,SAAC,KAAD,gBAAQJ,SAAUrC,GAAgB,EAAG4B,UAAU,QAAWa,GAA1D,aACiC,IAA9BA,EAAYC,cAAZ,0BAAqDD,EAAYC,cAAjE,QAAuF,WAG7F,EA2BoFC,WA1BlE,kBAAMC,EAAAA,QAAN,KA2BP,SAAC,IAAD,CAAQhB,UAAU,YAAYK,QAAS,kBAAMjB,EAAUlB,EAAhB,EAAvC,iCAKN,gBAAK8B,UAAU,WAAf,UACE,SAAC,IAAD,CAAQiB,cAAeC,EAAoBC,MAAM,UAK1D,C","sources":["Components/pages/loginPage/index.tsx"],"sourcesContent":["import { FC, useState } from 'react';\nimport Lottie from 'lottie-react';\nimport registrationLottie from '../../../assets/register.json';\nimport { Button} from 'antd';\nimport { postRequest } from '../../../services/apiHelperService';\nimport { openNotification } from '../../../services/notificationService';\nimport { useDispatch} from 'react-redux';\nimport { loggedInTrue } from '../../app/slices/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { pushUserDetails } from '../../app/slices/userSlice';\nimport { AxiosError } from 'axios';\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input';\nimport OTPInput, { ResendOTP } from 'otp-input-react';\nimport React from 'react';\n\nconst LoginComponent: FC = () => {\n\n  const [step, setStep] = useState<string>('otp');\n  const [phoneNumber, setPhoneNumber] = useState<string>();\n  const [OTP, setOTP] = useState<number>();\n  const [otpAttempted, setOtpAttempted] = useState<number>(0);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onFinish = (values: any) => {\n    postRequest('/login', values).then(res => {\n      dispatch(pushUserDetails(res));\n      openNotification('Logged In');\n      dispatch(loggedInTrue());\n      navigate('/', { replace: true });\n    }).catch((err : AxiosError) => {\n      let error:any = err.response?.data;\n      openNotification(error.error.message);\n    })\n  }\n\n  const verifyPhoneNumber = (mobile: string): boolean => {\n    return isValidPhoneNumber(mobile);\n  }\n\n  const sendOtp = (mobile: string) => {\n    if(verifyPhoneNumber(mobile)){\n      postRequest(`/otp-login/${mobile}`).then(res => {\n          if(res.userNotFound)\n            return openNotification('User Not Found');\n          openNotification(res.message);\n          setStep('otp-verification');\n      })\n    }\n    else\n      openNotification('Not a valid phone number');\n  }\n\n  const resendOtp = () => {\n    if (otpAttempted >= 3)\n      openNotification('Too many Attepmts', 'Please try again later');\n    else\n      postRequest(`/otp-send/${phoneNumber}`).then(res => {\n        openNotification(res.message);\n        setOtpAttempted(otpAttempted + 1);\n      })\n  }\n\n  const verifyOtp = (otp: number) => {\n    postRequest(`/otp-verification/${phoneNumber}/${otp as number}`).then(res => {\n      if(res.varified){\n        openNotification('Verification successful');\n        onFinish({ mobile: phoneNumber });\n      }\n      else\n        openNotification('Invalid OTP')\n    })\n  }\n\n  const renderButton = (buttonProps: any) => {\n    return (\n      <Button disabled={otpAttempted >= 3} className='mt-4' {...buttonProps}>\n        {buttonProps.remainingTime !== 0 ? `Please wait for ${buttonProps.remainingTime} sec` : \"Resend\"}\n      </Button>\n    );\n  };\n  const renderTime = () => React.Fragment;\n\n  \n\n  return (\n    <div className='container my-5'>\n      <div className='row align-items-center'>\n        <div className='col-md-6'>\n          {step === 'otp' ? \n          <>\n              <PhoneInput\n                placeholder=\"Enter phone number\"\n                value={phoneNumber}\n                onChange={setPhoneNumber} \n                defaultCountry='IN'\n                />\n              <div className='text-end'>\n              <Button className='mt-4' onClick={() => sendOtp(phoneNumber as string)}>Send OTP</Button>\n              <span>&nbsp;or&nbsp;</span>\n              <Button className='mt-4' onClick={() => navigate('/auth/register') }>Register</Button>\n              </div>\n          </> \n          : \n          <div className='d-flex align-items-center flex-column '>\n            <OTPInput value={OTP} onChange={setOTP} autoFocus OTPLength={4} otpType=\"number\" disabled={false} />\n            <div className='d-flex align-items-center'>\n              <ResendOTP onResendClick={() => resendOtp()} renderButton={renderButton} renderTime={renderTime} />\n              <Button className='mt-4 ms-3' onClick={() => verifyOtp(OTP as number)}>Verify OTP</Button>\n            </div>\n          </div> \n          }\n        </div>\n        <div className='col-md-6'>\n          <Lottie animationData={registrationLottie} loop={false} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginComponent;"],"names":["useState","step","setStep","phoneNumber","setPhoneNumber","OTP","setOTP","otpAttempted","setOtpAttempted","dispatch","useDispatch","navigate","useNavigate","sendOtp","mobile","isValidPhoneNumber","verifyPhoneNumber","openNotification","postRequest","then","res","userNotFound","message","verifyOtp","otp","values","varified","pushUserDetails","loggedInTrue","replace","catch","err","error","response","data","className","placeholder","value","onChange","defaultCountry","onClick","autoFocus","OTPLength","otpType","disabled","ResendOTP","onResendClick","renderButton","buttonProps","remainingTime","renderTime","React","animationData","registrationLottie","loop"],"sourceRoot":""}
{"version":3,"file":"static/js/843.6b9affb3.chunk.js","mappings":"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","sources":["Components/pages/registerPage/index.tsx","Components/selectOptions.ts"],"sourcesContent":["import { FC, useState } from 'react';\nimport Lottie from 'lottie-react';\nimport registrationLottie from '../../../assets/register.json';\nimport { Button, DatePicker, Form, Input, Select } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { genderOptions, professionOptions, bloodGroupOptions, qualificationOptions, martialStatusOptions, relationsOptions } from '../../selectOptions';\nimport { postRequest } from '../../../services/apiHelperService';\nimport { openNotification } from '../../../services/notificationService';\nimport { pushUserDetails } from '../../app/slices/userSlice';\nimport { loggedInTrue } from '../../app/slices/authSlice';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nconst RegisterComponent: FC = () => {\n  const [hideAnniversary, setHideAnniversary] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onMartialStatusChange = (value: string) => {\n    switch(value){\n      case 'Married': \n        setHideAnniversary(false);\n        return;\n      default:\n        setHideAnniversary(true);\n        return;\n    }\n  }\n\n  const onFinish = (values: any) => {\n    if (values.dob) {\n      let dob = new Date(values?.dob);\n      values.dob = `${dob.getFullYear()}-${dob.getMonth() < 10 ? `0${dob.getMonth()}` : dob.getMonth()}-${dob.getDate() < 10 ? `0${dob.getDate()}` : dob.getDate()}`\n    }\n    if (values.anniversary) {\n      let date = new Date(values.anniversary);\n      values.anniversary = `${date.getFullYear()}-${date.getMonth() < 10 ? `0${date.getMonth()}` : date.getMonth()}-${date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()}`\n    }\n    delete values.confirmPassword;\n    postRequest('/signup', values).then(res => {\n      if(res.isExisting){\n        return openNotification('User with Email already exists');\n      }\n      dispatch(loggedInTrue());\n      dispatch(pushUserDetails(res));\n      openNotification('SignUp Successful');\n      navigate('/', { replace: true});\n    }).catch(() => openNotification('Problem occured while signup', 'Retry after some time.'))\n  };\n\n\n  return (\n    <div className=\"container my-5\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-6\">\n          <Form onFinish={onFinish} layout=\"vertical\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"First Name\"\n                  name=\"firstName\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter first name\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Input placeholder=\"Enter your first name\" />\n                </Form.Item>\n              </div>\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter last name\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Input placeholder=\"Enter your last name\" />\n                </Form.Item>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Password\"\n                  name=\"password\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter the password\",\n                      type: \"string\",\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(_, value: string) {\n                        if (!value || value.length >= 6) {\n                          return Promise.resolve();\n                        }\n                        return Promise.reject(\n                          new Error(\"Password length should be more than 6!\")\n                        );\n                      },\n                    }),\n                  ]}\n                >\n                  <Input.Password placeholder=\"Enter the password\" />\n                </Form.Item>\n              </div>\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Confirm Password\"\n                  name=\"confirmPassword\"\n                  dependencies={[\"password\"]}\n                  hasFeedback\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter same password\",\n                      type: \"string\",\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(_, value) {\n                        if (!value || getFieldValue(\"password\") === value) {\n                          return Promise.resolve();\n                        }\n                        return Promise.reject(\n                          new Error(\n                            \"The two passwords that you entered do not match!\"\n                          )\n                        );\n                      },\n                    }),\n                  ]}\n                >\n                  <Input.Password placeholder=\"Confirm the password\" />\n                </Form.Item>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Email\"\n                  name=\"email\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter the Email\",\n                      type: 'email',\n                    },\n                  ]}\n                >\n                  <Input placeholder=\"Enter your email\" />\n                </Form.Item>\n              </div>\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Date of Birth\"\n                  name=\"dob\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please select date\",\n                      type: \"date\",\n                    },\n                  ]}\n                >\n                  <DatePicker placeholder=\"select date\" className=\"w-100\" format={'YYYY-MM-DD'} />\n                </Form.Item>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Gender\"\n                  name=\"gender\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please select the gender\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Select placeholder=\"Select gender\">\n                    {genderOptions.map((option, index) => {\n                      return <Select.Option value={option} key={index}>{option}</Select.Option>\n                    })}\n                  </Select>\n                </Form.Item>\n              </div>\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Profession\"\n                  name=\"profession\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please select the Profession\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Select placeholder=\"Select Profession\">\n                    {professionOptions.map((option, index) => {\n                      return <Select.Option value={option} key={index}>{option}</Select.Option>\n                    })}\n                  </Select>\n                </Form.Item>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Phone\"\n                  name=\"mobile\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter mobile number\",\n                      type: 'string',\n                      len: 10\n                    },\n                  ]}\n                >\n                  <Input type={'number'} placeholder=\"Enter Mobile Number\" />\n                </Form.Item>\n              </div>\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Blood Group\"\n                  name=\"blood\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter blood group\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Select placeholder='Select Blood Group'>\n                    {bloodGroupOptions.map((option, index) => {\n                      return <Select.Option value={option} key={index}>{option}</Select.Option>\n                    })}\n                  </Select>\n                </Form.Item>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Qualification\"\n                  name=\"qualification\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please enter qualification\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Select placeholder=\"Select\">\n                    {qualificationOptions.map((option, index) => {\n                      return <Select.Option value={option} key={index}>{option}</Select.Option>\n                    })}\n                  </Select>\n                </Form.Item>\n              </div>\n              <div className=\"col-md-6\">\n                <Form.Item\n                  label=\"Marital Status\"\n                  name=\"maritalStatus\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please select marital status\",\n                      type: \"string\",\n                    },\n                  ]}\n                >\n                  <Select placeholder=\"Select\" onChange={onMartialStatusChange}>\n                    {martialStatusOptions.map((option, index) => {\n                      return <Select.Option value={option} key={index}>{option}</Select.Option>\n                    })}\n                  </Select>\n                </Form.Item>\n              </div>\n            </div>\n            <Form.Item\n              label=\"Anniversary Date\"\n              name=\"anniversary\"\n              rules={[\n                {\n                  required: false,\n                  message: \"Please select date\",\n                  type: \"date\",\n                }\n              ]}\n              hidden={hideAnniversary}\n            >\n              <DatePicker placeholder=\"select date\" className=\"w-100\" format={'YYYY-MM-DD'} />\n            </Form.Item>\n            <Form.Item\n              label=\"Address\"\n              name=\"address\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please enter address\",\n                  type: \"string\",\n                },\n              ]}\n            >\n              <TextArea rows={3} placeholder=\"Enter Address\" />\n            </Form.Item>\n            <Form.List name=\"members\">\n              {(fields, { add, remove }) => (\n                <>\n                  {fields.map(({ key, name, ...restField }) => (\n                    <div className='row mx-1' key={key}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"relationId\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Please enter member UID\",\n                            min: 8,\n                            max: 9\n                          },\n                        ]}\n                        className='col-5'\n                      >\n                        <Input placeholder=\"Enter Exsiting member id\" />\n                      </Form.Item>\n\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"relationName\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Please select relation\",\n                          },\n                        ]}\n                        className='col-5 ms-1'\n                      >\n                        <Select placeholder='Select Relation'>\n                          {relationsOptions.map((option, index) => {\n                            return <Select.Option value={option} key={index}>{option}</Select.Option>\n                          })}\n                        </Select>\n                      </Form.Item>\n\n                      <MinusCircleOutlined onClick={() => remove(name)} className='col-1 mt-2' />\n                    </div>\n                  ))}\n                  <Form.Item>\n                    <Button\n                      type=\"dashed\"\n                      onClick={() => add()}\n                      block\n                      icon={<PlusOutlined />}\n                    >\n                      Add Member\n                    </Button>\n                  </Form.Item>\n                </>\n              )}\n            </Form.List>\n            <div>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Register\n                </Button>\n              </Form.Item>\n            </div>\n          </Form>\n        </div>\n        <div className=\"col-md-6\">\n          <Lottie animationData={registrationLottie} loop={false} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterComponent;","export const genderOptions: string[] = ['Male', 'Female', 'Others'];\n\nexport const professionOptions: string[] = ['Doctor', 'Engineer', 'Others'];\n\nexport const bloodGroupOptions: string[] = ['A+', 'A-', 'AB+', 'AB-', 'B+', 'B-', 'O+', 'O-'];\n\nexport const qualificationOptions: string[] = ['10th', '12th', 'Graduate', 'PostGraduate', 'PHD'];\n\nexport const martialStatusOptions: string[] = ['Married', 'Unmarried', 'Divorced', 'Widow', 'Widower'];\n\n\nexport const relationsOptions: string[] = ['Father', 'Mother', 'Husband', 'Wife', 'Sister', 'Brother'];\n\nexport const activeOptions: object[] = [\n    { label: 'Active', value: 'Active' },\n    { label: 'Inactive', value: 'Inactive' },\n];\n\nexport const professionOption: object[] = [\n    { label: \"Doctor\", value: \"Doctor\" },\n    { label: \"Engineer\", value: \"Engineer\" },\n    { label: \"Other\", value: \"Other\" },\n];\n\nexport const qualificationOption: object[] = [\n    { label: \"10th\", value: \"10th\" },\n    { label: \"12th\", value: \"12th\" },\n    { label: \"Graduate\", value: \"Graduate\" },\n    { label: \"PostGraduate\", value: \"PostGraduate\" },\n    { label: \"PHD\", value: \"PHD\" },\n  ];\n\nexport const statusOption: object[] = [\n    { label: 'Active', value: 'Active' },\n    { label: 'Inactive', value: 'Inactive' },\n]"],"names":["useState","hideAnniversary","setHideAnniversary","dispatch","useDispatch","navigate","useNavigate","className","onFinish","values","dob","Date","getFullYear","getMonth","getDate","anniversary","date","confirmPassword","postRequest","then","res","isExisting","openNotification","loggedInTrue","pushUserDetails","replace","catch","layout","label","name","rules","required","message","type","placeholder","getFieldValue","validator","_","value","length","Promise","resolve","reject","Error","dependencies","hasFeedback","format","genderOptions","option","index","professionOptions","len","bloodGroupOptions","qualificationOptions","onChange","martialStatusOptions","hidden","rows","fields","add","remove","map","key","restField","min","max","relationsOptions","onClick","block","icon","htmlType","animationData","registrationLottie","loop","activeOptions","professionOption","qualificationOption","statusOption"],"sourceRoot":""}